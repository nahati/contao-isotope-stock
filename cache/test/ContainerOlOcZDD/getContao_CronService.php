<?php

namespace ContainerOlOcZDD;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContao_CronService extends Nahati_ContaoIsotopeStockBundle_Tests_Integration_app_AppKernelTestDebugContainer
{
    /**
     * Gets the public 'contao.cron' shared service.
     *
     * @return \Contao\CoreBundle\Cron\Cron
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 3).'/vendor/contao/core-bundle/src/Cron/Cron.php';
        include_once \dirname(__DIR__, 3).'/vendor/contao/core-bundle/src/Cron/CronJob.php';

        $container->services['contao.cron'] = $instance = new \Contao\CoreBundle\Cron\Cron(function () use ($container) {
            return ($container->privates['contao.repository.cron_job'] ?? $container->load('getContao_Repository_CronJobService'));
        }, function () use ($container) {
            return ($container->services['doctrine.orm.default_entity_manager'] ?? $container->load('getDoctrine_Orm_DefaultEntityManagerService'));
        }, ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()));

        $a = ($container->privates['contao.cron.legacy'] ?? $container->load('getContao_Cron_LegacyService'));

        $instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '* * * * *', 'onMinutely'));
        $instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '@hourly', 'onHourly'));
        $instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '@daily', 'onDaily'));
        $instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '@weekly', 'onWeekly'));
        $instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob($a, '@monthly', 'onMonthly'));
        $instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob(($container->privates['contao.cron.purge_expired_data'] ?? $container->load('getContao_Cron_PurgeExpiredDataService')), '@hourly', 'onHourly'));
        $instance->addCronJob(new \Contao\CoreBundle\Cron\CronJob(($container->privates['contao.cron.purge_preview_links'] ?? $container->load('getContao_Cron_PurgePreviewLinksService')), '@daily', NULL));

        return $instance;
    }
}
