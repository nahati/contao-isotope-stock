// Mocks a Symfony container with the default configuration of the Contao core extension
$container = $this->getContainerWithContaoConfiguration('/tmp');

// Check if the container has been created
$this->assertInstanceOf('\Symfony\Component\DependencyInjection\ContainerBuilder', $container);

// Check if the container is working
$this->assertSame($container->getParameter('contao.upload_path'), 'files');
$this->assertSame($container->getParameter('kernel.project_dir'), '/tmp');

$this->framework = $this->mockContaoFramework();

$this->framework
->expects($this->atLeastOnce())
->method('initialize');

$config = $this->framework->getAdapter(Config::class);
$this->assertSame('Y-m-d H:i', $config->get('datimFormat'));

$this->framework->initialize();
$this->assertInstanceOf('Contao\CoreBundle\Framework\ContaoFramework', $this->framework);

// Mock a class with properties
$productCollection = $this->mockClassWithProperties(Standard::class);

// Mock an adapter
$adapter = $this->mockAdapter(['findBy']);
$adapter
->method('findBy')
->willReturn($productCollection);
$this->assertInstanceOf('Isotope\Model\Product\Standard', $productCollection);

// Mock a framework
$this->framework = $this->mockContaoFramework([Standard::class => $adapter]);
$this->assertInstanceOf('Contao\CoreBundle\Framework\ContaoFramework', $this->framework);

$this->framework->initialize();